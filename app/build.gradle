apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    defaultConfig {
        applicationId "com.lpc.test"
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        ndk {
//            abiFilters "armeabi", "armeabi-v7a", "x86", "arm64-v8a"
            abiFilters "armeabi-v7a", "x86"
        }

        multiDexEnabled false

        // 自定义BuildConfig中的变量
        buildConfigField 'String', 'API_SERVER_URL', '"https://www.baidu.com/"'

        // 多渠道打包的维度，针对"productFlavors"配置。当配置多个维度的时候，会将多个维度的"productFlavors"进行混合打包
        flavorDimensions "default"
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            def time = new Date().format("yyyyMMddHHmm")
            def fileName
            if (variant.buildType.name.equals('release')) {
                fileName = "Test-v${variant.mergedFlavor.versionName}-${time}-release.apk"
            } else if (variant.buildType.name.equals('debug')) {
                fileName = "Test-v${variant.mergedFlavor.versionName}-debug.apk"
            }
            outputFileName = fileName
        }
    }

    signingConfigs {
        release {
            storeFile file("../test.jks")
            storePassword 'test123'
            keyAlias 'test'
            keyPassword 'test123'
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            signingConfig signingConfigs.release
            minifyEnabled false
        }
    }

    productFlavors{
        production{
            dimension "default"
        }
        dev{
            dimension "default"
        }
    }

    lintOptions {
        checkReleaseBuilds false
        // 如果为true，则在发现错误时停止gradle构建
        abortOnError false

    }

    // aars目录下的aar包
    repositories {
        flatDir {
            dirs 'aars'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation rootProject.ext.dependencies.junit
    androidTestImplementation rootProject.ext.dependencies.runner
    androidTestImplementation rootProject.ext.dependencies.espresso

    implementation project(path: ':library')
    implementation project(path: ':kotlin-lib')
}
